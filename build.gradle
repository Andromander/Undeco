plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.61'
}

version = project.mc_version + "-" + project.mod_version
group = project.mod_group

repositories {
    mavenLocal()
    maven {
        url 'https://maven.tamaized.com/releases/'
    }
}

base {
    archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Need this here so eclipse task generates correctly.

runs {
    configureEach {
        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTesetNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTesetNamespaces', project.mod_id
    }

    data {
        workingDirectory project.file('run-data')
        programArguments.addAll '--mod', 'undeco', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing-mod', 'ornamental'
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    implementation "androsa:ornamental:${ornamental_version}"

    implementation "net.neoforged:neoforge:${neo_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "undeco",
                "Specification-Vendor": "Androsa",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Androsa",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version          : mc_version, mc_version_range: mc_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_version: mod_version,
            ornamental_version  : ornamental_version, ornamental_version_range: ornamental_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}